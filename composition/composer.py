#import rules file
from rules import *
#make class
class composer:
    
    #init function
    def __init__(self,pitches):
        self.pitches=pitches
        self.progression =["A"]
        self.currentPitchIndex = 0

    #generate chord progression function
    def makeChordProgression(self):
        self.getFirstChord(self.pitches[self.currentPitchIndex])
        while self.currentPitchIndex < len(self.pitches):
            self.getChord(self.pitches[self.currentPitchIndex],self.progression[len(self.progression)-1])
        return self.progression

    #helper function for first chord
    def getFirstChord(self,pitchIn):
        self.currentPitchIndex+=1

    #helper function to generate a chord (calls the rule class to get chords)
    def getChord(self,pitchIn,previousChord):
        self.progression.append(rules.getPossibleChords(pitchIn,previousChord))
        self.currentPitchIndex+=1


    #function to show the current chord progression generated by the composer to the user (mainly for testing purposes)
    def showChordsList(self):
        print(self.progression)


    #function to output the chord progression chosen by the user
    def outputChords(self,fileFormat):
        pass
    
    #function to get the current pitch
    def getPitch(self):
        return self.pitches[self.currentPitchIndex]

#testing
obj = composer(["A","B","C","D","E","F"])
obj.makeChordProgression()
obj.showChordsList()