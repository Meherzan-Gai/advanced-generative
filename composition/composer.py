#import rules file
from rules import *
#make class
class composer:
    
    #init function
    def __init__(self,pitches):
        self.pitches=pitches
        self.progression =[]
        self.currentPitchIndex = 0
        self.ruleSet = rules(pitches,self.progression)

    #generate chord progression function
    def makeChordProgression(self):
        self.getFirstChord(self.ruleSet.getPitch())
        while self.currentPitchIndex <= len(self.pitches):
            self.getChord(self.ruleSet.getPitch(),self.ruleSet.getPreviousChord())
        return self.progression

    #helper function for first chord
    def getFirstChord(self,pitchIn):
        newChord = pitchIn #CHANGE THIS LATER (PLACEHOLDER)
        self.progression.append(newChord)
        print(self.progression)
        self.currentPitchIndex+=1


    #helper function to generate a chord (calls the rule class to get chords)
    def getChord(self,pitchIn,previousChord):
        newChord = self.ruleSet.getPossibleChords(pitchIn,previousChord)
        self.progression.append(newChord)
        print()
        print(self.progression)
        self.currentPitchIndex+=1


    #function to show the current chord progression generated by the composer to the user (mainly for testing purposes)
    def showChordsList(self):
        print(self.progression)


    #function to output the chord progression chosen by the user
    def outputChords(self,fileFormat):
        pass
    
   


#testing
obj = composer(["A","B","C","D","E","F"])
obj.makeChordProgression()